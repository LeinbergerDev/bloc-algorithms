1) Describe an analogy for relating an algorithm that has efficiency O(1) and another algorithm that has O(2n). An example would be:
A1) An algorithm with the efficiency O(1) would be a sports car while an algorithm witn an efficiency of 0(2n) would be an old beatup car.
2) In plain English, what is the best case scenario for binary search?
A2) The best case for binary search is when the searched for item is in the middle of the collection.
3) In plain English, what is the worst-case scenario for binary search?
A3) The worst case for a binary search is when the searched for value is not part of the collection.  This would force the algorithm to always use the maximum number of searches.
4)In plain English, what is the bounded-case scenario for binary search?
A4)The bounded-case for binary search is a scenario where the value is included in the collection but it isn't the middle element.
5)Create a graph using the data below. Here's a CSV with the values you'll need.
https://leinbergertech-my.sharepoint.com/:x:/g/personal/jason_leinberger_tech/EVL610GkK8tEnwYm_XnyKd4B1bQmKRcyaWYuPbj-TRMotg?e=JCw6eM
6) What is the limit of the function above as n approaches infinity?
A6) n=infinity.
7) What is the Big-O of an algorithm that has the data points above?
A7) Big-O is the worst case 0(2n) 2 to the n'th power.
8) Write a Ruby method that takes a number n. This method must print the worst-case number of iterations for linear search to find an item in collections of size one to n. Use it to generate a table of worst-case iterations of collections up to size 10.
A8) 
def GetWorstCase(n)
  return "worst case = " + n.to_s
end
n   | worst case
----------------
1   |   1
2   |   2
3   |   3
4   |   4
5   |   5
6   |   6
7   |   7
8   |   8
9   |   9
10  |   10

9) Create a graph from the output using Google Sheets or other graphing software. Analyze the graph and denote its Big-O somewhere on the graph.
https://leinbergertech-my.sharepoint.com/:x:/g/personal/jason_leinberger_tech/EY4DQ4vDfyBFrzbjMMdLW7wBnJDnQgK9DDQKIp9WRR8Xpw?e=oeghQp
10) What is the Big-O of binary search?
A10) O(log n)
11) What is the Big-Ω of binary search?
A11) O(1)
12) What is the Big-Ө of binary search?
A12) Ө(log n)