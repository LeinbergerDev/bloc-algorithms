1: Given the alphabetically sorted collection in this checkpoint, 
how many iterations would it take to find the value G using linear search?

G is in index #6 so it will take 7 iterations to find the value "G".

2: Given the alphabetically sorted collection in this checkpoint, 
how many iterations would it take to find the value G using binary search?
  0 1 2 3 4 5 6
[ A B C D E F G ] Find G in the given array
    #1 low = 0 mid = 3 high = 6 "G" is greater than "D"
    #2 low = 4 mid = 5 high = 6 "G" is greater than "F"
    #3 low = 6 mid = 6 hight = 6 "G" is equal to "G"

3: Calculate fib(10), fib(11), fib(12) by hand.
   1    0       = fib(0)
   2    0 + 1   = fib(1)
   3    1 + 1   = fib(2)
   4    1 + 2   = fib(3)
   5    2 + 3   = fib(5)
   6    3 + 5   = fib(8)
   7    5 + 8   = fib(13)
   8    8 + 13  = fib(21)
   9    13 + 21 = fib(34)
   10   21 + 34 = fib(55)
   11   34 + 55 = fib(89)
   12   55 + 89 = fib(144)
   

Given an unsorted collection of a million items, which algorithm would you choose between linear search and binary search? 
Would you use an iterative or recursive solution? Explain your reasoning.
Given it's an unsorted collection I'd use linear seach algorithm.  Binary search requires that the array be sorted 
in order to be used.  I would use iterative for my solution.  Since I am using a linear algorithm a while loop with such 
as:
while array[i] != searched_for_value
  i = i + 1
end
could be used.

Given a sorted collection of a million items, which algorithm would you choose between linear search and binary search? 
Would you use an iterative or recursive solution? Explain your reasoning.
Given a sorted collection I would binary search.  Since the array is sorted a binary search will in most instances reduce
the number of times the alorithm has to be called to find the value.  I'd use a recursive approach in this instance calling the
find method with the newly calculated low and high index values.
